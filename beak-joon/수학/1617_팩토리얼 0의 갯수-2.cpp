#include <iostream>

using namespace std;

/*

 팩토리얼 N!

  3! = 3 * 2 * 1 = 6 -> 0의 갯수 : 0
  10! = 10 * 9 * 8 * 7 * 6 ... 2 * 1 = 3.628.800 -> 0의 갯수 : 2

  파보니치로 결과 값을 조회해 0을 찾아도 되지만 
  언제 값을 구하고 거기서 0의 갯수를 찾나..!

  규칙이 있으니 그걸 이용하면 된다.
  규칙은 2*5의 개수 = 0 개수 라는 것
  즉 (2*5) 의 개수를 찾으면 된다. 10! = (2*5)갯수 = 2
  그런데 2의 경우 n! 소인수분해로 쪼개면 어쩔 수 없이 
  5보다 많을 수 밖에 없다.
  그래서 n의 값을 5개수만큼 즉 n을 5로 나누면 바로 정답이 나온다. 

  //방법1
  이걸 수가 5랑 같아질 때 까지 /5 로 할 수도 있고

  //방법2
  5개수마다 쪼개서 할 수도 있다 이걸 다 더하면 결국 같은 값
  5가 1개 /5
  5가 2개 /25
  5 3개 /125
  4개부터는 25*25 니 중복이다 3개까지만 ㄱㄱ

*/

int main()
{
  int N;
  // 0의 갯수
  int count = 0 ;
  cin >> N;

  // 5로 계속 나눈다.
  while( N >= 5 )
  {
    count += N / 5;
    N = N / 5;
  }

  cout << count << '\n';
  
}